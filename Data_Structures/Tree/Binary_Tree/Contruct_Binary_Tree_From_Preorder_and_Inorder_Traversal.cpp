#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;
struct TreeNode
{
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
class Solution
{
public:
    // H√†m x√¢y d·ª±ng c√¢y nh·ªã ph√¢n t·ª´ preorder & inorder
    TreeNode *buildTreeHelper(vector<int> &preorder, int &preIndex, int inStart, int inEnd, unordered_map<int, int> &inMap)
    {
        if (inStart > inEnd)
            return NULL;

        // L·∫•y gi√° tr·ªã node g·ªëc t·ª´ preorder
        int rootVal = preorder[preIndex++];
        TreeNode *root = new TreeNode(rootVal);

        // T√¨m v·ªã tr√≠ c·ªßa root trong inorder
        int inIndex = inMap[rootVal];

        // X√¢y c√¢y con b√™n tr√°i (tr∆∞·ªõc inIndex trong inorder)
        root->left = buildTreeHelper(preorder, preIndex, inStart, inIndex - 1, inMap);
        // X√¢y c√¢y con b√™n ph·∫£i (sau inIndex trong inorder)
        root->right = buildTreeHelper(preorder, preIndex, inIndex + 1, inEnd, inMap);

        return root;
    }

    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder)
    {
        unordered_map<int, int> inMap;
        for (int i = 0; i < inorder.size(); i++)
        {
            inMap[inorder[i]] = i;
        }
        int preIndex = 0;
        return buildTreeHelper(preorder, preIndex, 0, inorder.size() - 1, inMap);
    }

    // H√†m inorder ƒë·ªÉ ki·ªÉm tra c√¢y
    void printInorder(TreeNode *root)
    {
        if (!root)
            return;
        printInorder(root->left);
        cout << root->val << " ";
        printInorder(root->right);
    }
};
int main() {
    Solution s;
    vector<int> preorder = {3, 9, 20, 15, 7};
    vector<int> inorder = {9, 3, 15, 20, 7};

    TreeNode* root = s.buildTree(preorder, inorder);

    cout << "Inorder traversal of constructed tree: ";
    s.printInorder(root); // K·∫øt qu·∫£ ph·∫£i tr√πng v·ªõi m·∫£ng inorder

    return 0;
}

// Gi·∫£i th√≠ch code: X√¢y d·ª±ng c√¢y nh·ªã ph√¢n t·ª´ Preorder v√† Inorder
// B√†i to√°n y√™u c·∫ßu x√¢y d·ª±ng c√¢y nh·ªã ph√¢n t·ª´ hai danh s√°ch:

// Preorder Traversal: {Root, Left, Right}

// Inorder Traversal: {Left, Root, Right}

// üìå √ù t∆∞·ªüng ch√≠nh
// Preorder gi√∫p ta x√°c ƒë·ªãnh g·ªëc c·ªßa c√¢y.

// Inorder gi√∫p ta x√°c ƒë·ªãnh c√°c node con tr√°i & ph·∫£i.

// Ch√∫ng ta s·ª≠ d·ª•ng ƒë·ªá quy ƒë·ªÉ l·∫ßn l∆∞·ª£t chia c√¢y th√†nh c√°c nh√°nh nh·ªè h∆°n.



// H√†m buildTreeHelper()
// üîπ Ch·ª©c nƒÉng:
// H√†m n√†y x√¢y d·ª±ng c√¢y nh·ªã ph√¢n b·∫±ng c√°ch ch·ªçn node g·ªëc t·ª´ preorder r·ªìi t√¨m c√°c node con t·ª´ inorder.
// üîπ Tham s·ªë:
// TreeNode *buildTreeHelper(vector<int> &preorder, int &preIndex, 
//                           int inStart, int inEnd, unordered_map<int, int> &inMap)
// preorder: Danh s√°ch preorder traversal.

// preIndex: Bi·∫øn ch·ªâ s·ªë hi·ªán t·∫°i trong preorder (d√πng tham chi·∫øu ƒë·ªÉ c·∫≠p nh·∫≠t).

// inStart, inEnd: Ch·ªâ s·ªë c·ªßa v√πng inorder hi·ªán t·∫°i.

// inMap: B·∫£n ƒë·ªì tra c·ª©u v·ªã tr√≠ c·ªßa m·ªói ph·∫ßn t·ª≠ trong inorder.